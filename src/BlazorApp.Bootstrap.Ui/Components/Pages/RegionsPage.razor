@page "/regions"
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@attribute [StreamRendering]

@using BlazorApp.Bootstrap.Business
@using BlazorApp.Bootstrap.Business.Commands
@using BlazorApp.Bootstrap.Business.Queries.Regions
@using BlazorApp.Bootstrap.Data.Domain
@using BlazorApp.Bootstrap.Data.Dtos
@using BlazorApp.Bootstrap.Data.Infrastructure
@using BlazorApp.Bootstrap.Business.Queries
@using BlazorApp.Bootstrap.Ui.Components.Shared
@using MediatR

@inject QueryRunner Queries
@inject IMediator Mediator

<h3>Regions</h3>

<WaitSpinner @ref="IsLoadingRef" IsLoading="false"></WaitSpinner>
<PageMessages @ref="PageMessage"></PageMessages>

<div class="row">
    <div class="col-lg-8 col-md-6 col-sm-12">
        <div class="card shadow p-3 mb-5 bg-body rounded">
            <div class="card-header">
                Regions
                <br />
                @if (isLoading)
                {
                    <p>loading...</p>
                }
                else
                {
                    <button class="btn btn-primary" @onclick="() => ShowEditorClick(0)">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-plus-square" viewBox="0 0 16 16">
                            <path d="M14 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1zM2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2z" />
                            <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4" />
                        </svg>
                    </button>
                }
            </div>
            <div class="card-body ">

                @foreach (var region in Regions)
                {
                    <div class="row col-12 form-control" @onclick="() => ShowEditorClick(region.Id)">
                        <span>@region.Id</span>
                        <span>@region.RegionName</span>
                        <span>@region.ModifiedOn.ToString("yyyy-MM-dd HH:mm:ss")</span>
                    </div>
                }

            </div>
            <div class="card-footer">
                @if (isLoading)
                {
                    <p>loading...</p>
                }
                else
                {
                    <button class="btn btn-primary" @onclick="ReloadClick">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-clockwise" viewBox="0 0 16 16">
                            <path fill-rule="evenodd" d="M8 3a5 5 0 1 0 4.546 2.914.5.5 0 0 1 .908-.417A6 6 0 1 1 8 2z" />
                            <path d="M8 4.466V.534a.25.25 0 0 1 .41-.192l2.36 1.966c.12.1.12.284 0 .384L8.41 4.658A.25.25 0 0 1 8 4.466" />
                        </svg>
                        Reload
                    </button>
                    <button class="btn btn-primary" @onclick="() => ShowEditorClick(0)">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-plus-square" viewBox="0 0 16 16">
                            <path d="M14 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1zM2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2z" />
                            <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4" />
                        </svg>
                        New
                    </button>
                }
            </div>
        </div>
    </div>
</div>

@if (editorShow)
{
    <div class="modal show" tabindex="-1" role="dialog" style="display:block; overflow-y: auto;">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Edit Region</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="EditorCloseClick">                    </button>
                </div>
                <div class="modal-body">

                    <p>@EditData?.Id</p>
                    <p><InputText class="form-control" @bind-Value="@EditData.RegionName" placeholder="Region Name" /></p>
                    <p>@EditData?.ModifiedOn</p>

                </div>
                <div class="modal-footer">
                    @if (isProcessing)
                    {
                        <p>processing request...</p>
                    }

                    else
                    {
                        <button class="btn btn-primary" @onclick="(async () => await ActionClick(ManageActions.Update))">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-floppy" viewBox="0 0 16 16">
                                <path d="M11 2H9v3h2z" />
                                <path d="M1.5 0h11.586a1.5 1.5 0 0 1 1.06.44l1.415 1.414A1.5 1.5 0 0 1 16 2.914V14.5a1.5 1.5 0 0 1-1.5 1.5h-13A1.5 1.5 0 0 1 0 14.5v-13A1.5 1.5 0 0 1 1.5 0M1 1.5v13a.5.5 0 0 0 .5.5H2v-4.5A1.5 1.5 0 0 1 3.5 9h9a1.5 1.5 0 0 1 1.5 1.5V15h.5a.5.5 0 0 0 .5-.5V2.914a.5.5 0 0 0-.146-.353l-1.415-1.415A.5.5 0 0 0 13.086 1H13v4.5A1.5 1.5 0 0 1 11.5 7h-7A1.5 1.5 0 0 1 3 5.5V1H1.5a.5.5 0 0 0-.5.5m3 4a.5.5 0 0 0 .5.5h7a.5.5 0 0 0 .5-.5V1H4zM3 15h10v-4.5a.5.5 0 0 0-.5-.5h-9a.5.5 0 0 0-.5.5z" />
                            </svg>
                            Save
                        </button>
                        @if (EditData?.Id > 0)
                        {
                            <button class="btn btn-outline-secondary" @onclick="(async () => await ActionClick(ManageActions.Delete))">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
                                    <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0z" />
                                    <path d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4zM2.5 3h11V2h-11z" />
                                </svg>
                                Delete
                            </button>
                        }
                        <button class="btn btn-secondary" @onclick="EditorCloseClick">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-x-lg" viewBox="0 0 16 16">
                                <path d="M2.146 2.854a.5.5 0 1 1 .708-.708L8 7.293l5.146-5.147a.5.5 0 0 1 .708.708L8.707 8l5.147 5.146a.5.5 0 0 1-.708.708L8 8.707l-5.146 5.147a.5.5 0 0 1-.708-.708L7.293 8z" />
                            </svg>
                            Close
                        </button>
                    }
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}


@code {
    private bool isLoading = true;
    private bool isProcessing = false;
    private bool editorShow = false;

    private WaitSpinner IsLoadingRef = null!;
    private PageMessages PageMessage = null!;

    //private List<SelectLitsDto> Regions { get; set; } = new List<SelectLitsDto>();
    private List<RegionDto> Regions { get; set; } = new List<RegionDto>();
    private string SelectedRegionId { get; set; } = "-1";

    private RegionDto? EditData { get; set; } = null;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GetFilterOptions();
        }
    }

    private async Task GetFilterOptions()
    {
        IsLoadingRef?.Show();
        try
        {
            isLoading = true;
            //await Task.Delay(5000);
            //Regions = await Queries.Get<Region, SelectLitsDto>(new GetRegionsQuery());
            Regions = await Queries.Get<Region, RegionDto>(new GetRegionsQuery());
        }
        catch (Exception ex)
        {
            PageMessage?.ShowError(ex.Message);
        }
        finally
        {
            isLoading = false;
            IsLoadingRef?.Hide();
            StateHasChanged();
        }

    }

    private void ShowEditorClick(long id)
    {
        if (id == 0)
            EditData = new RegionDto();
        else
            EditData = Regions.FirstOrDefault(w => w.Id == id);

        editorShow = true;
        StateHasChanged();
    }

    private async Task ReloadClick()
    {
        await GetFilterOptions();
    }

    private void EditorCloseClick() => editorShow = false;

    private async Task ActionClick(ManageActions action)
    {
        try
        {
            PageMessage.Clear();
            isProcessing = true;

            if (EditData == null || string.IsNullOrWhiteSpace(EditData.RegionName))
            {
                PageMessage?.ShowError("Region name cannot be empty.");
                return;
            }

            CommandResults? results = null;

            switch (action)
            {
                case ManageActions.Update:
                    if (EditData.Id > 0)
                        results = await Mediator.Send(new ManageRegionCommand(EditData).Update());
                    else
                        results = await Mediator.Send(new ManageRegionCommand(EditData).Create());
                    break;

                case ManageActions.Delete:
                    results = await Mediator.Send(new ManageRegionCommand(EditData).Delete());
                    break;

                default:
                    throw new NullReferenceException("invalid action request.");
            }

            if (results.HasErrors)
                PageMessage.ShowError(results.Errors);

            if (results.Data != null)
                Regions.Add((RegionDto)results.Data);

            if (action == ManageActions.Delete && !results.HasErrors)
                Regions.Remove(Regions.First(w => w.Id == EditData.Id)); //remove item if deleted

            EditData = null;
            editorShow = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            PageMessage?.ShowError(ex.Message);
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }

    }


}
