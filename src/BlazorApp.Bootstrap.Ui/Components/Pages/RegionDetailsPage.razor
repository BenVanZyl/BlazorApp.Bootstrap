@page "/regions/{Id:long}"
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@attribute [StreamRendering]

@using BlazorApp.Bootstrap.Business
@using BlazorApp.Bootstrap.Business.Commands
@using BlazorApp.Bootstrap.Business.Queries.Regions
@using BlazorApp.Bootstrap.Data.Domain
@using BlazorApp.Bootstrap.Data.Dtos
@using BlazorApp.Bootstrap.Data.Infrastructure
@using BlazorApp.Bootstrap.Ui.Components.Shared
@using MediatR

@inject QueryRunner Queries
@inject IMediator Mediator
@inject NavigationManager Nav

<WaitSpinner @ref="IsLoadingRef" IsLoading="false"></WaitSpinner>
<PageMessages @ref="PageMessage"></PageMessages>

<EditForm Model="@EditData" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <div class="row">
        <div class="col-lg-8 col-md-6 col-sm-12">
            <div class="card shadow p-3 mb-5 bg-body rounded">
                <div class="card-header">
                    <h3>Region Details</h3>
                </div>
                <div class="card-body ">
                    @if (EditData != null)
                    {
                        <p>
                            <InputText class="form-control" @bind-Value="@EditData.RegionName" placeholder="Region Name" />
                        </p>
                        <p>CreatedOn: @EditData.CreatedOn</p>
                        <p>ModifiedOn: @EditData.ModifiedOn</p>
                    }
                    else
                    {
                        <p>not available.</p>
                    }
                </div>
                <div class="card-footer">
                    <button type="submit" class="btn btn-primary">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-floppy" viewBox="0 0 16 16">
                            <path d="M11 2H9v3h2z" />
                            <path d="M1.5 0h11.586a1.5 1.5 0 0 1 1.06.44l1.415 1.414A1.5 1.5 0 0 1 16 2.914V14.5a1.5 1.5 0 0 1-1.5 1.5h-13A1.5 1.5 0 0 1 0 14.5v-13A1.5 1.5 0 0 1 1.5 0M1 1.5v13a.5.5 0 0 0 .5.5H2v-4.5A1.5 1.5 0 0 1 3.5 9h9a1.5 1.5 0 0 1 1.5 1.5V15h.5a.5.5 0 0 0 .5-.5V2.914a.5.5 0 0 0-.146-.353l-1.415-1.415A.5.5 0 0 0 13.086 1H13v4.5A1.5 1.5 0 0 1 11.5 7h-7A1.5 1.5 0 0 1 3 5.5V1H1.5a.5.5 0 0 0-.5.5m3 4a.5.5 0 0 0 .5.5h7a.5.5 0 0 0 .5-.5V1H4zM3 15h10v-4.5a.5.5 0 0 0-.5-.5h-9a.5.5 0 0 0-.5.5z" />
                        </svg>
                        Save
                    </button>

                    <button type="button" class="btn btn-secondary" @onclick="OnAddNew">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-plus-square" viewBox="0 0 16 16">
                            <path d="M14 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1zM2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2z" />
                            <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4" />
                        </svg>
                        New
                    </button>

                    <button type="button" class="btn btn-secondary" @onclick="OnClear">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-clockwise" viewBox="0 0 16 16">
                            <path fill-rule="evenodd" d="M8 3a5 5 0 1 0 4.546 2.914.5.5 0 0 1 .908-.417A6 6 0 1 1 8 2z" />
                            <path d="M8 4.466V.534a.25.25 0 0 1 .41-.192l2.36 1.966c.12.1.12.284 0 .384L8.41 4.658A.25.25 0 0 1 8 4.466" />
                        </svg>
                        Clear
                    </button>
                </div>
            </div>
        </div>
    </div>
</EditForm>

<p>region id  = @Id</p>


@code {
    [Parameter]
    public long Id { get; set; }

    private WaitSpinner IsLoadingRef = null!;
    private PageMessages PageMessage = null!;

    private RegionDto? EditData { get; set; } = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GetRegion();
        }
    }

    private async Task GetRegion()
    {
        try
        {
            IsLoadingRef.Show();

            RegionDto queryData = new() { Id = Id };
            EditData = await Queries.Get<Region, RegionDto>(new RegionQueries(queryData));
            if (EditData == null)
                PageMessage.ShowError($"Region with ID {Id} not found.");
        }
        catch (Exception ex)
        {
            PageMessage.ShowError($"{nameof(GetRegion)} Failed :: {ex.Message}");
        }
        finally
        {
            IsLoadingRef.Hide();
            StateHasChanged();
        }
    }

    private async void HandleValidSubmit()
    {
        try
        {
            PageMessage.Clear();
            IsLoadingRef.Show();

            if (EditData == null || string.IsNullOrWhiteSpace(EditData.RegionName))
            {
                PageMessage?.ShowError("Region name cannot be empty.");
                return;
            }

            CommandResults? results = null;
            if (EditData.Id > 0)
                results = await Mediator.Send(new ManageRegionCommand(EditData).Update());
            else
                results = await Mediator.Send(new ManageRegionCommand(EditData).Create());

            if (!results.HasErrors)
            {
                Id = results.IdAsLong;
                await GetRegion();
                PageMessage.ShowInfo("Success.");
                Nav.NavigateTo($"regions/{results.IdAsString}");
            }
            else
                PageMessage.ShowError(results.Errors);
        }
        catch (Exception ex)
        {
            PageMessage.ShowError($"{nameof(HandleValidSubmit)} Failed :: {ex.Message}");
        }
        finally
        {
            IsLoadingRef.Hide();
            StateHasChanged();
        }
    }

    private void OnClear()
    {
        try
        {
            EditData = new();
        }
        catch (Exception ex)
        {
            PageMessage.ShowError($"{nameof(OnClear)} Failed :: {ex.Message}");
        }
        finally
        {
            StateHasChanged();
        }
    }

    private void OnAddNew()
    {
        try
        {
            EditData = new();
        }
        catch (Exception ex)
        {
            PageMessage.ShowError($"{nameof(OnAddNew)} Failed :: {ex.Message}");
        }
    }
}
