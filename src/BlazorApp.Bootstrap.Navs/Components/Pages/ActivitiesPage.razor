@page "/activities"
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@attribute [StreamRendering]

@using BlazorApp.Bootstrap.Business
@using BlazorApp.Bootstrap.Business.Queries
@using BlazorApp.Bootstrap.Data.Domain
@using BlazorApp.Bootstrap.Data.Dtos
@using BlazorApp.Bootstrap.Data.Infrastructure
@using BlazorApp.Bootstrap.Navs.Components.Shared

@inject QueryRunner Queries

<h3>Activities</h3>

<WaitSpinner @ref="_isLoadingRef" IsLoading="false"></WaitSpinner>

@if (PageAction == PageActions.List)
{
    <div class="row">

        <div class="col-lg-8 col-md-8 col-sm-12">
            <div class="card shadow p-3 mb-5 bg-body rounded">
                <div class="card-header">Activities</div>
                <div class="card-body ">

                    <InputSelect class="form-select form-select-sm" aria-label="Filter by Activity Type" @bind-value="Filter.ActivityTypeId">
                        <DropDownOptions ListOptions="ActivityTypes"></DropDownOptions>
                    </InputSelect>

                </div>
                <div class="card-footer">
                    <button class="btn btn-primary" @onclick="LoadClick">Load</button>
                    <button class="btn btn-primary" @onclick="RunSyncClick">Read Sync</button>
                    <button class="btn btn-primary" @onclick="RunAsyncClick">Read Async</button>
                </div>
            </div>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(statusMessage))
    {
        <div class="alert alert-dark">
            @statusMessage
        </div>
    }
    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="alert alert-danger" role="alert">
            Error! @ErrorMessage
        </div>
    }

    <div class="col-lg-8 col-md-8 col-sm-12">
        <div class="card p-3 mb-5 bg-body rounded">
            <div class="card-header">Activities</div>
            <div class="card-body">

                @if (Activities != null && Activities.Count > 0)
                {
                    <table class="table">
                        <thead>
                            <tr>
                                <th scope="col">Id</th>
                                <th scope="col">Date</th>
                                <th scope="col">Day</th>
                                <th scope="col">Type</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var v in Activities)
                            {
                                <tr>
                                    <th scope="row">@v.Id</th>
                                    <td>@v.ActivityDate</td>
                                    <td>@v.ActivityDay</td>
                                    <td>@v.ActivityType</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
                else
                {
                    <div class="alert alert-warning" role="alert">
                        No data available.
                    </div>
                }
            </div>
        </div>
    </div>

}
else if (PageAction == PageActions.Edit)
{

}
else
{
    <div class="alert alert-warning" role="alert">
        Error! Action not available!
    </div>
}



@code {

    
    private PageActions PageAction { get; set; } = PageActions.List;

    private WaitSpinner _isLoadingRef = null!;

    private bool isLoading { get; set; } = true;
    private string ErrorMessage { get; set; } = string.Empty;
    private string statusMessage { get; set; } = string.Empty;

    private List<ActivityDto>? Activities { get; set; } = null;

    private List<SelectLitsDto>? ActivityTypes { get; set; } = null;

    private ActivitiesFilterDto Filter { get; set; } = new();



    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //     if (firstRender)
    //         return;

    //     //await Get();
    // }

    protected override async Task OnInitializedAsync()
    {

        await GetFilterOptions();
        //await Get();
        await base.OnInitializedAsync();
    }

    private async void LoadClick()
    {
        await Get();
    }

    private async Task Get()
    {
        try
        {
            SetStatusMessage();
            IsLoadingShow();

            await Task.Delay(2000);

            ErrorMessage = string.Empty;

            Activities = await Queries.Get<Activity, ActivityDto>(new GetActivitiesQuery(Filter));
            StateHasChanged();

        }
        catch (Exception ex)
        {
            SetErrorMessage(ex.Message);
        }
        finally
        {
            IsLoadingHide();
        }
    }

    private async Task GetFilterOptions()
    {
        try
        {
            SetStatusMessage();
            IsLoadingShow();
            ErrorMessage = string.Empty;

            ActivityTypes = await Queries.Get<ActivityType, SelectLitsDto>(new GetActivityTypesQuery());
            StateHasChanged();

        }
        catch (Exception ex)
        {
            SetErrorMessage(ex.Message);
        }
        finally
        {
            IsLoadingHide();
        }
    }

    private void IsLoadingShow()
    {
        if (_isLoadingRef != null)
            _isLoadingRef.Show();
    }

    private void IsLoadingHide()
    {
        if (_isLoadingRef != null)
            _isLoadingRef.Hide();
    }

    private void SetStatusMessage(string message = "")
    {
        if (string.IsNullOrEmpty(message))
            ErrorMessage = message;

        statusMessage = message;
        StateHasChanged();
    }

    private void SetErrorMessage(string message = "")
    {
        ErrorMessage = message;
        StateHasChanged();
    }

    private async void RunSyncClick()
    {
        try
        {
            SetStatusMessage();
            IsLoadingShow();
            int counter = 0;
            for (int i = 0; i < 1000; i++)
            {
                counter = i;
                Activities = await Queries.Get<Activity, ActivityDto>(new GetActivitiesQuery(Filter));
                SetStatusMessage($"processed iteration #{counter}.");
            }
            SetStatusMessage($"Done! iterations={counter}.");

        }
        catch (Exception ex)
        {
            SetErrorMessage(ex.Message);
        }
        finally
        {
            IsLoadingHide();
        }

    }

    private async void RunAsyncClick()
    {
        try
        {
            SetStatusMessage();
            IsLoadingShow();
            int maxParallelism = 2;
            int iterations = 4;

            SetStatusMessage($"running async with {iterations} iterations on {maxParallelism} threads");

            var stopwatch = new System.Diagnostics.Stopwatch();
            stopwatch.Start();

            ParallelOptions options = new() { MaxDegreeOfParallelism = maxParallelism };
            await Parallel.ForAsync(1, iterations, options, async (i, ct) =>
            {
                //var temp = await Queries.Get<Activity, ActivityDto>(new GetActivitiesQuery(Filter));
                var temp = await Queries.Get(new GetActivitiesQuery(Filter));
            });

            stopwatch.Stop();
            double totalSeconds = stopwatch.Elapsed.TotalSeconds;
            SetStatusMessage($"Done. {totalSeconds} seconds to complete {iterations} iterations.");
        }
        catch (Exception ex)
        {
            SetErrorMessage(ex.Message);
        }
        finally
        {
            IsLoadingHide();
        }
    }
}

